----- YesMan's All Generic Traders Sell Weapon Parts
----- Dependent upon Weapon Parts Overhaul
----- specifically its script "wpo_loot.script"
---- all of this script is ripped from wpo, just with my own, commented additions
---
---
---
local prt_w_inject_conds = {}
prt_w_inject_conds["-1"] = {35, 65}
prt_w_inject_conds["4"] = {60, 65}

local function dbg_print(msg,...)
    if not ym_debug then return end

    ym_debug.set_modname("Traders Sell Parts")
    ym_debug.dbg_print(msg,...)
end

local function dbg_dump(o)
    if not ym_debug then return end

    return ym_debug.dbg_dump(o)
end

-- temp condition for trade
local parts_list = {}
local has_parts 			= arti_jamming.has_parts


TraderAuto = trader_autoinject.update
function trader_autoinject.update(npc)
    TraderAuto(npc)
    -- destockifier comopatibility
    -- if zz_trader_destokifier then
    --     ResetTimeEvent("destokify" .. npc:id(), "destokify" .. npc:id(), 0.01)
    -- end
    -- yes_man_add_parts_to_all(npc) -- you define this function ok
end

local BASE_AMT = 15
-- TODO: edit function to only inject weapon parts
function yes_man_add_parts_to_all(npc)
    -- purge any existing parts
    function itr(temp, item)
        if item and string.find(item:section(), "prt_w") then
            local se_itm = alife_object(item:id())
            if se_itm then 
                item:set_condition(math.random(1, 100) / 100)
            end
        end
    end
    npc:iterate_inventory(itr)
end

function on_game_start()
    local prices = ini_file("items\\settings\\part_prices.ltx")
    local part_section = utils_data.collect_section(prices, "wpo_part_prices")
    local n = prices:line_count("wpo_part_prices") or 0

    for i=0, n-1 do
        local result, sec, value = prices:r_line("wpo_part_prices" , i , "", "")
        -- print_dbg("parts_list[%s] = %s", i + 1, sec)    
        parts_list[i + 1] = sec
    end
end

-----------------
local furniture = {
    ["esc_m_trader"] = true,
    ["red_m_lesnik"] = true
}

-- --custom inject function, to inject to most traders
-- -- most is ripped from autoinject
function yes_man_spawn_items_with_condition(npc, to_spawn, check_existing, item_table)

    local npc_name = npc:name()
    local alive_or_furniture = xr_conditions.is_alive(db.actor, npc) or furniture[npc_name]
    if not alive_or_furniture then return end
    local supply_table = {}
    copy_table(supply_table, to_spawn)
    if check_existing then
        local function itr_inv(temp, item)
            if supply_table[item:section()] and supply_table[item:section()] > 0 then
                -- printf("Found 1 of %s", item:section())
                supply_table[item:section()] = supply_table[item:section()] - 1
            end
        end
        npc:iterate_inventory(itr_inv)
    end
    
    for k,v in pairs(supply_table) do
        -- printf("Creating %s of %s", v, k)
        for i=1, v do
            -- printf("Created %s", k)
            -- using the optional cond arg for alife_create_item, to add random condition to the items
            alife_create_item(k, npc, item_table)
        end
    end
end


-- AddScriptCallback("trader_on_restock")