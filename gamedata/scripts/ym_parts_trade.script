--#region Debug

local function dbg_print(msg,...)
    if not ym_debug then return end

    ym_debug.set_modname("PARTS TRADER INJECT")
    ym_debug.dbg_print(msg,...)
end

local function dbg_dump(o)
    if not ym_debug then return end
    return ym_debug.dbg_dump(o)
end

local function weighted_random  (pool)
   local poolsize = 0
   for k,v in pairs(pool) do
      poolsize = poolsize + v[1]
   end

   local selection = math.random(1,poolsize)
   for k,v in pairs(pool) do
      selection = selection - v[1] 
      if (selection <= 0) then
         return v[2]
      end
   end
end

--#endregion




--#region vars

local RANDOM_W_PARTS = true
local RANDOM_O_PARTS = true
local SPAWN_W_PARTS = true
local SPAWN_O_PARTS = true
local BASE_AMT = 5

--#region
-- local parts_list = { -- Tiers Based on Prices Highest to Lowest
--     ["5"] = {
--         prt_w_barrel_10,
--         prt_w_bolt_10,
--         prt_w_gas_tube_7,
--         prt_w_trigger_components_3,
--         prt_w_trigger_components_5,
--         prt_w_bolt_2,
--         prt_w_bolt_3,
--         prt_w_barrel_13,
--         prt_w_bolt_carrier_10,
--         prt_w_bolt_13,
--         prt_w_barrel_4,
--         prt_w_barrel_6,
--         prt_w_bolt_carrier_2,
--         prt_w_bolt_carrier_6,
--         prt_w_bolt_7
--     },
--     ["4"] = {
--         prt_w_bolt_8,
--         prt_w_gas_tube_1,
--         prt_w_gas_tube_8,
--         prt_w_p_barrel_4,
--         prt_w_barrel_5,
--         prt_w_bolt_5,
--         prt_w_trigger_components_2,
--         prt_w_bolt_carrier_3,
--         prt_w_bolt_16,
--         prt_w_gas_tube_6,
--         prt_w_barrel_7,
--         prt_w_bolt_carrier_4,
--         prt_w_bolt_4,
--         prt_w_bolt_9,
--         prt_w_gas_tube_5
--     },
--     ["3"] = {
--         prt_w_gas_tube_11,
--         prt_w_trigger_components_1,
--         prt_w_barrel_11,
--         prt_w_bolt_carrier_1,
--         prt_w_bolt_carrier_5,
--         prt_w_bolt_carrier_7,
--         prt_w_bolt_1,
--         prt_w_bolt_6,
--         prt_w_bolt_14,
--         prt_w_gas_tube_2,
--         prt_w_trigger_components_4,
--         prt_w_bolt_carrier_11,
--         prt_w_gas_tube_3,
--         prt_w_gas_tube_4,
--         prt_w_p_barrel_7
--     },
--     ["2"] = {
--         prt_w_p_trigger_4,
--         prt_w_barrel_3,
--         prt_w_barrel_9,
--         prt_w_bolt_11,
--         prt_w_bolt_12,
--         prt_w_bolt_15,
--         prt_w_bolt_17,
--         prt_w_gas_tube_9,
--         prt_w_gas_tube_10,
--         prt_w_p_spring_6,
--         prt_w_trigger_components_6,
--         prt_w_barrel_8,
--         prt_w_bolt_carrier_8,
--         prt_w_bolt_carrier_9,
--         prt_w_p_spring_3
--     },
--     ["1"] = {
--         prt_w_p_barrel_3,
--         prt_w_p_trigger_3,
--         prt_w_p_spring_4,
--         prt_w_barrel_1,
--         prt_w_barrel_2,
--         prt_w_p_barrel_2,
--         prt_w_p_trigger_2,
--         prt_w_p_spring_2,
--         prt_w_p_barrel_1,
--         prt_w_p_barrel_5,
--         prt_w_p_barrel_6,
--         prt_w_p_trigger_1,
--         prt_w_barrel_12,
--         prt_w_p_spring_1,
--         prt_w_p_spring_5
--     },
--     ["all"] = {
--         prt_w_barrel_1,
--         prt_w_barrel_2,
--         prt_w_barrel_3,
--         prt_w_barrel_4,
--         prt_w_barrel_5,
--         prt_w_barrel_6,
--         prt_w_barrel_7,
--         prt_w_barrel_8,
--         prt_w_barrel_9,
--         prt_w_barrel_10,
--         prt_w_barrel_11,
--         prt_w_barrel_12,
--         prt_w_barrel_13,
--         prt_w_trigger_components_1,
--         prt_w_trigger_components_2,
--         prt_w_trigger_components_3,
--         prt_w_trigger_components_4,
--         prt_w_trigger_components_5,
--         prt_w_trigger_components_6,
--         prt_w_bolt_carrier_1,
--         prt_w_bolt_carrier_2,
--         prt_w_bolt_carrier_3,
--         prt_w_bolt_carrier_4,
--         prt_w_bolt_carrier_5,
--         prt_w_bolt_carrier_6,
--         prt_w_bolt_carrier_7,
--         prt_w_bolt_carrier_8,
--         prt_w_bolt_carrier_9,
--         prt_w_bolt_carrier_10,
--         prt_w_bolt_carrier_11,
--         prt_w_bolt_1,
--         prt_w_bolt_2,
--         prt_w_bolt_3,
--         prt_w_bolt_4,
--         prt_w_bolt_5,
--         prt_w_bolt_6,
--         prt_w_bolt_7,
--         prt_w_bolt_8,
--         prt_w_bolt_9,
--         prt_w_bolt_10,
--         prt_w_bolt_11,
--         prt_w_bolt_12,
--         prt_w_bolt_13,
--         prt_w_bolt_14,
--         prt_w_bolt_15,
--         prt_w_bolt_16,
--         prt_w_bolt_17,
--         prt_w_gas_tube_1,
--         prt_w_gas_tube_2,
--         prt_w_gas_tube_3,
--         prt_w_gas_tube_4,
--         prt_w_gas_tube_5,
--         prt_w_gas_tube_6,
--         prt_w_gas_tube_7,
--         prt_w_gas_tube_8,
--         prt_w_gas_tube_9,
--         prt_w_gas_tube_10,
--         prt_w_gas_tube_11,
--         prt_w_p_barrel_1,
--         prt_w_p_barrel_2,
--         prt_w_p_barrel_3,
--         prt_w_p_barrel_4,
--         prt_w_p_barrel_5,
--         prt_w_p_barrel_6,
--         prt_w_p_barrel_7,
--         prt_w_p_trigger_1,
--         prt_w_p_trigger_2,
--         prt_w_p_trigger_3,
--         prt_w_p_trigger_4,
--         prt_w_p_spring_1,
--         prt_w_p_spring_2,
--         prt_w_p_spring_3,
--         prt_w_p_spring_4,
--         prt_w_p_spring_5,
--         prt_w_p_spring_6,
--     }
-- }

-- local trade_table = {
--     ["all"] = {
--     [1] = {
--             ["prt_w_barrel_1"] = 1,
--             ["prt_w_barrel_2"] = 1,
--             ["prt_w_barrel_3"] = 1,
--             ["prt_w_barrel_4"] = 1,
--             ["prt_w_barrel_5"] = 1,
--             ["prt_w_barrel_6"] = 1,
--             ["prt_w_barrel_7"] = 1,
--             ["prt_w_barrel_8"] = 1,
--             ["prt_w_barrel_9"] = 1,
--             ["prt_w_barrel_10"] = 1,
--             ["prt_w_barrel_11"] = 1,
--             ["prt_w_barrel_12"] = 1,
--             ["prt_w_barrel_13"] = 1,
--             ["prt_w_trigger_components_1"] = 1,
--             ["prt_w_trigger_components_2"] = 1,
--             ["prt_w_trigger_components_3"] = 1,
--             ["prt_w_trigger_components_4"] = 1,
--             ["prt_w_trigger_components_5"] = 1,
--             ["prt_w_trigger_components_6"] = 1,
--             ["prt_w_bolt_carrier_1"] = 1,
--             ["prt_w_bolt_carrier_2"] = 1,
--             ["prt_w_bolt_carrier_3"] = 1,
--             ["prt_w_bolt_carrier_4"] = 1,
--             ["prt_w_bolt_carrier_5"] = 1,
--             ["prt_w_bolt_carrier_6"] = 1,
--             ["prt_w_bolt_carrier_7"] = 1,
--             ["prt_w_bolt_carrier_8"] = 1,
--             ["prt_w_bolt_carrier_9"] = 1,
--             ["prt_w_bolt_carrier_10"] = 1,
--             ["prt_w_bolt_carrier_11"] = 1,
--             ["prt_w_bolt_1"] = 1,
--             ["prt_w_bolt_2"] = 1,
--             ["prt_w_bolt_3"] = 1,
--             ["prt_w_bolt_4"] = 1,
--             ["prt_w_bolt_5"] = 1,
--             ["prt_w_bolt_6"] = 1,
--             ["prt_w_bolt_7"] = 1,
--             ["prt_w_bolt_8"] = 1,
--             ["prt_w_bolt_9"] = 1,
--             ["prt_w_bolt_10"] = 1,
--             ["prt_w_bolt_11"] = 1,
--             ["prt_w_bolt_12"] = 1,
--             ["prt_w_bolt_13"] = 1,
--             ["prt_w_bolt_14"] = 1,
--             ["prt_w_bolt_15"] = 1,
--             ["prt_w_bolt_16"] = 1,
--             ["prt_w_bolt_17"] = 1,
--             ["prt_w_gas_tube_1"] = 1,
--             ["prt_w_gas_tube_2"] = 1,
--             ["prt_w_gas_tube_3"] = 1,
--             ["prt_w_gas_tube_4"] = 1,
--             ["prt_w_gas_tube_5"] = 1,
--             ["prt_w_gas_tube_6"] = 1,
--             ["prt_w_gas_tube_7"] = 1,
--             ["prt_w_gas_tube_8"] = 1,
--             ["prt_w_gas_tube_9"] = 1,
--             ["prt_w_gas_tube_10"] = 1,
--             ["prt_w_gas_tube_11"] = 1,
--             ["prt_w_p_barrel_1"] = 1,
--             ["prt_w_p_barrel_2"] = 1,
--             ["prt_w_p_barrel_3"] = 1,
--             ["prt_w_p_barrel_4"] = 1,
--             ["prt_w_p_barrel_5"] = 1,
--             ["prt_w_p_barrel_6"] = 1,
--             ["prt_w_p_barrel_7"] = 1,
--             ["prt_w_p_trigger_1"] = 1,
--             ["prt_w_p_trigger_2"] = 1,
--             ["prt_w_p_trigger_3"] = 1,
--             ["prt_w_p_trigger_4"] = 1,
--             ["prt_w_p_spring_1"] = 1,
--             ["prt_w_p_spring_2"] = 1,
--             ["prt_w_p_spring_3"] = 1,
--             ["prt_w_p_spring_4"] = 1,
--             ["prt_w_p_spring_5"] = 1,
--             ["prt_w_p_spring_6"] = 1,
--             ["prt_o_fabrics_1"] = 1,
--             ["prt_o_fabrics_2"] = 1,
--             ["prt_o_fabrics_3"] = 1,
--             ["prt_o_fabrics_4"] = 1,
--             ["prt_o_retardant_1"] = 1,
--             ["prt_o_retardant_2"] = 1,
--             ["prt_o_retardant_3"] = 1,
--             ["prt_o_retardant_4"] = 1,
--             ["prt_o_retardant_5"] = 1,
--             ["prt_o_retardant_6"] = 1,
--             ["prt_o_retardant_7"] = 1,
--             ["prt_o_retardant_8"] = 1,
--             ["prt_o_retardant_9"] = 1,
--             ["prt_o_retardant_10"] = 1,
--             ["prt_o_retardant_11"] = 1,
--             ["prt_o_retardant_12"] = 1,
--             ["prt_o_retardant_13"] = 1,
--             ["prt_o_retardant_14"] = 1,
--             ["prt_o_retardant_15"] = 1,
--             ["prt_o_retardant_16"] = 1,
--             ["prt_o_retardant_17"] = 1,
--             ["prt_o_retardant_18"] = 1,
--             ["prt_o_retardant_19"] = 1,
--             ["prt_o_retardant_20"] = 1,
--             ["prt_o_ballistic_1"] = 1,
--             ["prt_o_ballistic_2"] = 1,
--             ["prt_o_ballistic_3"] = 1,
--             ["prt_o_ballistic_4"] = 1,
--             ["prt_o_ballistic_5"] = 1,
--             ["prt_o_ballistic_6"] = 1,
--             ["prt_o_ballistic_7"] = 1,
--             ["prt_o_ballistic_8"] = 1,
--             ["prt_o_ballistic_9"] = 1,
--             ["prt_o_ballistic_10"] = 1,
--             ["prt_o_ballistic_11"] = 1,
--             ["prt_o_ballistic_12"] = 1,
--             ["prt_o_ballistic_13"] = 1,
--             ["prt_o_ballistic_14"] = 1,
--             ["prt_o_ballistic_15"] = 1,
--             ["prt_o_ballistic_16"] = 1,
--             ["prt_o_ballistic_17"] = 1,
--             ["prt_o_ballistic_18"] = 1,
--             ["prt_o_ballistic_19"] = 1,
--             ["prt_o_ballistic_20"] = 1,
--         }
--     },
--     -- Trader types
--     ["MECHANIC"] = {},
--     ["BARMAN"] = {},
--     ["MEDIC"] = {},
--     ["SUPPLIER"] = {},

--     -- Specific Traders
--     ["sidorovich"] = {},


--     -- Communities
-- 	-- ["bandit"] = {
-- 	-- },
-- 	-- ["dolg"] = {
-- 	-- },
-- 	-- ["ecolog"] = {
-- 	-- },
-- 	-- ["freedom"] = {
-- 	-- },
-- 	-- ["killer"] = {
-- 	-- },
-- 	-- ["army"] = {
-- 	-- },
-- 	-- ["monolith"] = {
-- 	-- },
-- 	-- ["greh"] = {
-- 	-- },
-- 	-- ["stalker"] = {
-- 	-- },
-- 	-- ["csky"] = {
-- 	-- },
-- 	-- ["isg"] = {
-- 	-- },
-- 	-- ["renegade"] = {
-- 	-- },
-- }
--#endregion
local default_weights = {
    { 15, { 1, 30 } },
    { 87, { 31, 60 } },
    { 2,  { 61, 80 } },
    { 1,  { 81, 100 } }
}


local trader_cond_weights_ranges = {
    ["BARMAN"] = default_weights,
    ["MECHANIC"] = default_weights,
    ["SUPPLIER"] = default_weights
}
--#endregion

--#region Example trade_table
-- local trade_table = {

--     ["stalker"] = {
--         [1] = {
--             ["device_gas_lamp"] = 1,
--             ["radio_item"] = 1
--         },
--         [2] = {
--             ["device_gas_lamp"] = 1,
--             ["radio_item"] = 1,
--             ["piano_item"] = 1,
--             ["case_item"] = 1,
--             ["exo_repair_kit_item"] = 1
--         },
--         [3] = {
--             ["device_gas_lamp"] = 1,
--             ["radio_item"] = 1,
--             ["piano_item"] = 1,
--             ["case_item"] = 2,
--             ["exo_repair_kit_item"] = 2,
--             ["workshop_item"] = 1,
--         }
--     },
-- }
--#endregion


-- function spawn_items(npc)
--     local item_table = {}
--     local trader_type = trader_autoinject.get_trader_type(npc)
--     local is_supplier = trader_type == trader_autoinject.SUPPLIER
--     local is_mechanic = trader_type == trader_autoinject.MECHANIC
--     if is_supplier or is_mechanic then
--         -- local community = npc:character_community() or "stalker"
--         local trader_table = trade_table["all"]
--         -- local supply_level = clamp(trader_autoinject.supply_level(npc, true) or 1, 1, 3)
--         local prts_table = trader_table[1]
--         local random_trader_table = {}
--         random_trader_table[1] = {}
        
--         -- Randomly remove elements
--         if RANDOM_PRTS then
            
--         end

--         if trader_table[1] then
--             trader_autoinject.spawn_items(npc, trader_table[1], true)
--         end
--     end
-- end



--[[
    TODO: Setup table with community/trader weighted random condition percentage ranges
--]]


local function add_wpn_parts(npc)
    local tradertype = trader_autoinject.get_trader_type(npc)

    -- Mod is not active, essentially
    if not SPAWN_W_PARTS then return end

    -- purge any existing parts
    function itr(temp, item)
        if not item then return end
        -- Check if weapon or armor part
        if item and string.find(item:section(), "prt_w") then
            local se_itm = alife_object(item:id())
            if se_itm then 
                alife_release_id(item:id())
            end
        end
    end

    -- remove trader's existing parts
    npc:iterate_inventory(itr)

    -- generate an amount of parts based on trader type
    local table = {}
    local prices = ini_file("items\\settings\\part_prices.ltx")
	local parts_sections = utils_data.collect_section(prices, "wpo_part_prices")
    dbg_print("parts_sections = %s", dbg_dump(parts_sections))
    local supply_level = trader_autoinject.supply_level(npc, true) or 1
    dbg_print("npc %s has supply level %s", npc:name(), supply_level)
    for i = 1, supply_level * BASE_AMT do
        local part = parts_sections[math.random(#parts_sections)]
        dbg_print("Adding %s to trader %s", part, npc:name())

        if table[part] then
            table[part] = table[part] + 1
        else
            table[part] = 1
        end

    end

    if supply_level > 1 then
        table["partskit_tool"] = 1
    end
    -- add the parts
    trader_autoinject.spawn_items(npc, table, true)
end
--[[
wpo_loot.script example
function add_parts(npc)
	if trader_autoinject.get_trader_type(npc) == trader_autoinject.MECHANIC then
		-- purge any existing parts
		function itr(temp, item)
			if item and string.find(item:section(), "prt_w") then
				local se_itm = alife_object(item:id())
				if se_item then 
					alife_release_id(item:id())
				end
			end
		end
		npc:iterate_inventory(itr)
		-- generate an amount of parts based on trader type
		local table = {}
		local supply_level = trader_autoinject.supply_level(npc, true) or 1
		print_dbg("npc %s has supply level %s", npc:name(), supply_level)
		for i=1,supply_level * BASE_AMT do
			local part = parts_list[math.random(#parts_list)]
			print_dbg("Adding %s to trader %s", part, npc:name())
			if table[part] then
				table[part] = table[part] + 1
			else
				table[part] = 1
			end
		end
		if supply_level > 1 then
			table["partskit_tool"] = 1
		end
		-- add the parts
		trader_autoinject.spawn_items(npc, table, true)
	end
end

--]]


local function change_part_cond(npc)
    local tradertype = trader_autoinject.get_trader_type(npc)
    local weights_conds = trader_cond_weights_ranges[tradertype] or trader_cond_weights_ranges["SUPPLIER"]

    -- Mod is not active, essentially
    if not RANDOM_O_PARTS and not RANDOM_W_PARTS then return end
    -- Iterate through trader inv
    function itr(temp, item)
        if not item then return end

        -- Check if weapon or armor part
        if ((RANDOM_W_PARTS and string.find(item:section(), "prt_w")) or (RANDOM_O_PARTS and string.find(item:section(), "prt_o"))) then
            local se_itm = alife_object(item:id())
            if se_itm then 
                -- Set the part condition to a random number
                local cond_range = weighted_random(weights_conds)
                local min = cond_range[1] or 30
                local max = cond_range[2] or 80

                item:set_condition(math.random(min, max) / 100)
            end
        end
    end
    -- execute iter function
    npc:iterate_inventory(itr)
end



--========================
-- TODO: Implement per-item buy_sell cond exponents
local function on_get_item_cost(kind, obj, profile, calculated_cost, ret)
    if kind ~= "condition_based" then return end
    if not string.find(obj:section(), "prt_w") then return end
    printf("\n")

    dbg_print("Item = %s", obj:section())
    local item_cond = obj:condition()
    local cond_exponent = profile.cond_exponent
    local old_cost = calculated_cost / math.pow( (0.9*item_cond + 0.1), cond_exponent > 0 and cond_exponent or 0.75)
    dbg_print("profile.mode = %s", profile.mode)
    --[[
    profile.mode:
        -- mode : if 1 it means its calculating the price of selling to npc, if 2 means its calculating the price of buying from npc
                    = 1     = Sell to trader
                        will use the Trader's exponents and factors
                    = 2     = Buy from trader 
                        will use the Player's exponents and factors
    --]]
    dbg_print("profile.cfg = %s", profile.cfg)
    dbg_print("profile.cond_factor = %s", profile.cond_factor)
    dbg_print("profile.cond_exponent = %s", cond_exponent)
    dbg_print("item_cond = %s", item_cond)
    dbg_print("calculated_cost = %s", calculated_cost)
    dbg_print("old_cost = %s", old_cost)

    -- Change the 
    if profile.mode ~= 2 then return end
    local new_cond_exponent = 2
	local new_cost = old_cost * math.pow((item_cond * 0.9 + 0.1), new_cond_exponent > 0 and new_cond_exponent or 0.75)
    dbg_print("new exponent = %s", new_cond_exponent)
    dbg_print("new cost = %s", new_cost)


	-- ret.new_cost = new_cost
end
--========================


-- Loop back into trader_autoinject

TraderAuto = trader_autoinject.update

function trader_autoinject.update(npc)
    -- Normal trader autoinject
    TraderAuto(npc)
    -- Add wpn parts
    -- add_wpn_parts(npc)
    -- Let Destockifier run
    -- destockifier comopatibility
    if zz_trader_destokifier then
        ResetTimeEvent("destockify" .. npc:id(), "destockify" .. npc:id(), 0)
    end
    -- Change condition of parts
    change_part_cond(npc)
end

function on_game_start()
	RegisterScriptCallback("on_get_item_cost",on_get_item_cost)
end
